AWSTemplateFormatVersion: "2010-09-09"
Description: A sample template for Web Proxy on AWS

Parameters:
  Stage:
    Description: Which environments to deploy the system.
    Type: String
    Default: "dev"
    AllowedValues: ["dev", "stg", "prod"]
  DomainName:
    Description: Public domain name for proxy server.
    Type: String
  PublicHostedZoneId:
    Description: Public hosted zone id
    Type: String
  UseInternalNLB:
    Description: NLB's scheme is internal (true) or internet-facing (false)
    Type: String
    Default: "false" # Default scheme is internet-facing
    AllowedValues: ["true", "false"]
  DockerImageUri:
    Description: URI of docker image
    Type: String
  # S3BucketName:
  #   Description: S3 bucket name for the storage of Fargate tasks
  #   Type: String

Conditions:
  IsInternalNLB: !Equals
    - !Ref UseInternalNLB
    - true

Resources:
  # VPC
  ProxyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: "ProxyVPC-igw"

  InternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref ProxyVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProxyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: false

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProxyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: false

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref ProxyVPC
      Tags:
        - Key: Name
          Value: "ProxyVPC Public Routes"

  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProxyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: false

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProxyVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: false

  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref ProxyVPC

  PrivateSubnet1RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # NatGatewayEIP:
  #   Type: "AWS::EC2::EIP"
  #   DependsOn: InternetGatewayAttachment
  #   Properties:
  #     Domain: vpc

  # NatGateway:
  #   Type: "AWS::EC2::NatGateway"
  #   Properties:
  #     AllocationId: !GetAtt NatGatewayEIP.AllocationId
  #     SubnetId: !Ref PublicSubnet1

  # PrivateRoute:
  #   Type: "AWS::EC2::Route"
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable
  #     DestinationCidrBlock: "0.0.0.0/0"
  #     NatGatewayId: !Ref NatGateway

  # Security Groups
  PrivateLinkSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group for privatelink
      VpcId: !Ref ProxyVPC
      SecurityGroupIngress:
        - Description: Allow access to port 443 from Squid server
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref SquidSecurityGroup
      Tags:
        - Key: "Group"
          Value: "Proxy"

  # EFSSecurityGroup:
  #   Type: "AWS::EC2::SecurityGroup"
  #   Properties:
  #     GroupDescription: "Security group for efs-filesystem"
  #     VpcId: !Ref ProxyVPC
  #     SecurityGroupIngress:
  #       - Description: Allow access to port 2049 from Squid server
  #         IpProtocol: tcp
  #         FromPort: 2049
  #         ToPort: 2049
  #         SourceSecurityGroupId: !Ref SquidSecurityGroup
  #     Tags:
  #       - Key: "Group"
  #         Value: "Proxy"

  SquidSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Squid Proxy
      VpcId: !Ref ProxyVPC
      SecurityGroupIngress:
        - Description: Allow access to port 8080 from anywhere
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - Description: Allow all outbound
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: "Group"
          Value: "Proxy"

  # IAM roles
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AssumeRolePolicy"
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowAccessToLogGroup
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: "AccessToLogGroupPolicy"
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogStreams"
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AssumeRolePolicy"
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref "AWS::AccountId"
              ArnLike:
                "aws:SourceArn": !Sub "arn:aws:ecs:*:${AWS::AccountId}:*"
      # Policies:
      #   - PolicyName: AllowAccessToS3Bucket
      #     PolicyDocument:
      #       Version: "2012-10-17"
      #       Statement:
      #         - Sid: "AllowAccessToS3ObjectPolicy"
      #           Effect: "Allow"
      #           Action:
      #             - "s3:GetObject"
      #             - "s3:PutObject"
      #             - "s3:DeleteObject"
      #           Resource:
      #             - !Sub "arn:aws:s3:::${S3Bucket}/*"

  # VPC Endpoints
  ECRDkrEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref ProxyVPC
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref PrivateLinkSecurityGroup
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecr.dkr"
      SubnetIds:
        - !Ref PrivateSubnet1
      VpcEndpointType: Interface

  ECRApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref ProxyVPC
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref PrivateLinkSecurityGroup
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecr.api"
      SubnetIds:
        - !Ref PrivateSubnet1
      VpcEndpointType: Interface

  ECSLogsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref ProxyVPC
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref PrivateLinkSecurityGroup
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.logs"
      SubnetIds:
        - !Ref PrivateSubnet1
      VpcEndpointType: Interface

  # S3Endpoint:
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties:
  #     VpcId: !Ref ProxyVPC
  #     RouteTableIds:
  #       - !Ref PrivateRouteTable
  #     ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
  #     VpcEndpointType: Gateway

  # Route53
  PublicProxyHostedZoneRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref PublicHostedZoneId
      RecordSets:
        - Name: !Ref DomainName
          AliasTarget:
            HostedZoneId: !GetAtt ProxyLoadBalancer.CanonicalHostedZoneID
            DNSName: !GetAtt ProxyLoadBalancer.DNSName
          Type: A

  # NLB
  ProxyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: PublicRoute
    Properties:
      IpAddressType: ipv4
      Scheme: !If [IsInternalNLB, internal, internet-facing]
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: network

  ProxyLoadBalancerListener1:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: TCP
      Port: 8080
      LoadBalancerArn: !Ref ProxyLoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ProxyLoadBalancerTargetGroup1

  ProxyLoadBalancerTargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8080
      Protocol: TCP
      TargetType: ip
      VpcId: !Ref ProxyVPC
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2

  # # S3
  # S3Bucket:
  #   Type: "AWS::S3::Bucket"
  #   Properties:
  #     BucketName: !Ref S3BucketName

  # EFS
  # EFSFileSystemCache:
  #   Type: "AWS::EFS::FileSystem"
  #   Properties:
  #     BackupPolicy:
  #       Status: "DISABLED"
  #     Encrypted: true
  #     FileSystemTags:
  #       - Key: "Group"
  #         Value: "Proxy"
  #     FileSystemPolicy:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: "Allow"
  #           Action:
  #             - "elasticfilesystem:ClientWrite"
  #             - "elasticfilesystem:ClientMount"
  #           Principal:
  #             AWS: !GetAtt ECSTaskRole.Arn
  #     LifecyclePolicies:
  #       - TransitionToIA: "AFTER_1_DAY"
  #     PerformanceMode: "generalPurpose"
  #     ThroughputMode: "bursting"

  # EFSFileSystemLog:
  #   Type: "AWS::EFS::FileSystem"
  #   Properties:
  #     BackupPolicy:
  #       Status: "DISABLED"
  #     Encrypted: true
  #     FileSystemTags:
  #       - Key: "Group"
  #         Value: "Proxy"
  #     FileSystemPolicy:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: "Allow"
  #           Action:
  #             - "elasticfilesystem:ClientWrite"
  #             - "elasticfilesystem:ClientMount"
  #           Principal:
  #             AWS: !GetAtt ECSTaskRole.Arn
  #     PerformanceMode: "generalPurpose"
  #     ThroughputMode: "bursting"

  # EFSMountTargetCacheAZ1:
  #   Type: "AWS::EFS::MountTarget"
  #   Properties:
  #     FileSystemId: !Ref EFSFileSystemCache
  #     SubnetId: !Ref PublicSubnet1
  #     SecurityGroups:
  #       - !Ref EFSSecurityGroup

  # EFSMountTargetCacheAZ2:
  #   Type: "AWS::EFS::MountTarget"
  #   Properties:
  #     FileSystemId: !Ref EFSFileSystemCache
  #     SubnetId: !Ref PublicSubnet2
  #     SecurityGroups:
  #       - !Ref EFSSecurityGroup

  # EFSMountTargetLogAZ1:
  #   Type: "AWS::EFS::MountTarget"
  #   Properties:
  #     FileSystemId: !Ref EFSFileSystemLog
  #     SubnetId: !Ref PublicSubnet1
  #     SecurityGroups:
  #       - !Ref EFSSecurityGroup

  # EFSMountTargetLogAZ2:
  #   Type: "AWS::EFS::MountTarget"
  #   Properties:
  #     FileSystemId: !Ref EFSFileSystemLog
  #     SubnetId: !Ref PublicSubnet2
  #     SecurityGroups:
  #       - !Ref EFSSecurityGroup

  # EFSAccessPointCache:
  #   Type: "AWS::EFS::AccessPoint"
  #   Properties:
  #     FileSystemId: !Ref EFSFileSystemCache
  #     PosixUser:
  #       Uid: "10000"
  #       Gid: "10000"
  #     RootDirectory:
  #       CreationInfo:
  #         OwnerGid: "10000"
  #         OwnerUid: "10000"
  #         Permissions: "0755"
  #       Path: "/mnt/cache"

  # EFSAccessPointLog:
  #   Type: "AWS::EFS::AccessPoint"
  #   Properties:
  #     FileSystemId: !Ref EFSFileSystemLog
  #     PosixUser:
  #       Uid: "10000"
  #       Gid: "10000"
  #     RootDirectory:
  #       CreationInfo:
  #         OwnerGid: "10000"
  #         OwnerUid: "10000"
  #         Permissions: "0755"
  #       Path: "/mnt/log"

  # ECS Task Definition for Squid Proxy
  SquidTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "squid-task-definition-${Stage}"
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      RuntimePlatform:
        CpuArchitecture: "X86_64"
        OperatingSystemFamily: "LINUX"
      TaskRoleArn: !GetAtt
        - ECSTaskRole
        - Arn
      ExecutionRoleArn: !GetAtt
        - ECSTaskExecutionRole
        - Arn
      RequiresCompatibilities:
        - FARGATE
      # Volumes:
      #   - Name: "EFSVolumeCache"
      #     EFSVolumeConfiguration:
      #       AuthorizationConfig:
      #         AccessPointId: !Ref EFSAccessPointCache
      #         IAM: "ENABLED"
      #       FilesystemId: !Ref EFSFileSystemCache
      #       TransitEncryption: "ENABLED"
      #   - Name: "EFSVolumeLog"
      #     EFSVolumeConfiguration:
      #       AuthorizationConfig:
      #         AccessPointId: !Ref EFSAccessPointLog
      #         IAM: "ENABLED"
      #       FilesystemId: !Ref EFSFileSystemLog
      #       TransitEncryption: "ENABLED"
      ContainerDefinitions:
        - Name: !Sub "squid-proxy-${Stage}"
          Image: !Ref DockerImageUri
          Essential: true
          PortMappings:
            - HostPort: 8080
              Protocol: tcp
              ContainerPort: 8080
          HealthCheck:
            Command:
              - "CMD-SHELL"
              - "nc -z localhost 8080 || exit 1"
            Interval: 10
            Timeout: 5
            Retries: 3
            StartPeriod: 60
          Environment:
            - Name: "TZ"
              Value: "UTC"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub "squid-task-${Stage}"
              awslogs-region: !Ref "AWS::Region"
              awslogs-create-group: true
              awslogs-stream-prefix: !Sub "squid-task-${Stage}"
          StopTimeout: 30
          # MountPoints:
          #   - SourceVolume: "EFSVolumeCache"
          #     ContainerPath: "/var/spool/squid"
          #     ReadOnly: false
          #   - SourceVolume: "EFSVolumeLog"
          #     ContainerPath: "/var/log/squid"
          #     ReadOnly: false
          Ulimits:
            - Name: "nofile"
              HardLimit: 64000
              SoftLimit: 64000

  # ECS Cluster for Squid Proxy
  SquidCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Sub "SquidCluster-${Stage}"
      ClusterSettings:
        - Name: "containerInsights"
          Value: "enabled"

  # ECS Service for Squid Proxy
  SquidService:
    Type: "AWS::ECS::Service"
    DependsOn:
      - ProxyLoadBalancerListener1
    Properties:
      ServiceName: !Sub "SquidService-${Stage}"
      Cluster: !Ref SquidCluster
      DesiredCount: 1
      DeploymentController:
        Type: ECS
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      LaunchType: FARGATE
      PlatformVersion: 1.4.0
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt SquidSecurityGroup.GroupId
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
      TaskDefinition: !Ref SquidTaskDefinition
      LoadBalancers:
        - TargetGroupArn: !Ref ProxyLoadBalancerTargetGroup1
          ContainerName: !Sub "squid-proxy-${Stage}"
          ContainerPort: 8080
